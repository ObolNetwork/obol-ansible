- name: Create charon-node directory
  ansible.builtin.file:
    path: ~/node-{{ node_index }}
    state: directory
    mode: '775'

- name: Copy validator_keys folder
  ansible.builtin.copy:
    remote_src: false
    directory_mode: true
    src: '{{ node_config.validator_keys_dir }}'
    dest: ~/node-{{ node_index }}/
    mode: '777'

- name: Copy charon-enr-private-key
  ansible.builtin.copy:
    remote_src: false
    src: '{{ node_config.private_key_file }}'
    dest: ~/node-{{ node_index }}/
    mode: '777'

- name: Copy cluster-lock.json
  ansible.builtin.copy:
    remote_src: false
    src: '{{ node_config.lock_file }}'
    dest: ~/node-{{ node_index }}/
    mode: '777'

- name: Retrieve full path of validator keys
  ansible.builtin.command: realpath ~/node-{{ node_index }}/validator_keys
  register: validator_keys
  changed_when: validator_keys.stdout != ''

- name: Retrieve full path of private key
  ansible.builtin.command: realpath ~/node-{{ node_index }}/charon-enr-private-key
  register: private_key
  changed_when: private_key.stdout != ''

- name: Retrieve full path of cluster lock
  ansible.builtin.command: realpath ~/node-{{ node_index }}/cluster-lock.json
  register: cluster_lock
  changed_when: cluster_lock.stdout != ''

- name: Pull default charon image
  community.docker.docker_image:
    name: obolnetwork/charon:{{ node_image_version }}
    source: pull

- name: Create charon container
  community.docker.docker_container:
    image: obolnetwork/charon:{{ node_image_version }}
    name: 'charon-{{ node_index }}'
    recreate: true
    command: run
    volumes:
      - '{{ validator_keys.stdout }}:/charon/validator_keys'
      - '{{ private_key.stdout }}:/charon/charon-enr-private-key'
      - '{{ cluster_lock.stdout }}:/charon/cluster-lock.json'
    env:
      CHARON_BEACON_NODE_ENDPOINTS: '{{ node_config.beacon_node_endpoints | default(omit) }}'
      CHARON_BUILDER_API: '{{ node_config.builder_api | default(omit) }}'
      CHARON_FEATURE_SET: '{{ node_config.feature_set | default(omit) }}'
      CHARON_FEATURE_SET_DISABLE: '{{ node_config.feature_set_disable | default(omit) }}'
      CHARON_FEATURE_SET_ENABLE: '{{ node_config.feature_set_enable | default(omit) }}'
      CHARON_JAEGER_ADDRESS: '{{ node_config.jaeger_address | default(omit) }}'
      CHARON_JAEGER_SERVICE: '{{ node_config.jaeger_service | default(omit) }}'
      CHARON_LOCK_FILE: '/charon/cluster-lock.json'
      CHARON_LOG_FORMAT: '{{ node_config.log_format | default(omit) }}'
      CHARON_LOG_LEVEL: '{{ node_config.log_level | default(omit) }}'
      CHARON_LOKI_ADDRESSES: '{{ node_config.loki_addresses | default(omit) }}'
      CHARON_LOKI_SERVICE: '{{ node_config.loki_service | default(omit) }}'
      CHARON_MONITORING_ADDRESS: '{{ node_config.monitoring_address | default(omit) }}'
      CHARON_NO_VERIFY: '{{ node_config.no_verify | default(omit) }}'
      CHARON_P2P_ALLOWLIST: '{{ node_config.p2p_allowlist | default(omit) }}'
      CHARON_P2P_DENYLIST: '{{ node_config.p2p_denylist | default(omit) }}'
      CHARON_P2P_DISABLE_REUSEPORT: '{{ node_config.p2p_disable_reuseport | default(omit) }}'
      CHARON_P2P_EXTERNAL_HOSTNAME: '{{ node_config.p2p_external_hostname | default(omit) }}'
      CHARON_P2P_EXTERNAL_IP: '{{ node_config.p2p_external_ip | default(omit) }}'
      CHARON_P2P_RELAYS: '{{ node_config.p2p_relays | default(omit) }}'
      CHARON_P2P_TCP_ADDRESS: '{{ node_config.p2p_tcp_address | default(omit) }}'
      CHARON_PRIVATE_KEY_FILE: '/charon/charon-enr-private-key'
      CHARON_SIMNET_BEACON_MOCK: '{{ node_config.simnet_beacon_mock | default(omit) }}'
      CHARON_SIMNET_VALIDATOR_KEYS_DIR: '{{ node_config.simnet_validator_keys_dir | default(omit) }}'
      CHARON_SIMNET_VALIDATOR_MOCK: '{{ node_config.simnet_validator_mock | default(omit) }}'
      CHARON_SYNTHETIC_BLOCK_PROPOSALS: '{{ node_config.synthetic_block_proposals | default(omit) }}'
      CHARON_VALIDATOR_API_ADDRESS: '{{ node_config.validator_api_address | default(omit) }}'
    exposed_ports:
      - '3610'
    ports:
      - '3610:3610'
